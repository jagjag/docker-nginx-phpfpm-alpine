FROM alpine:3.7

LABEL maintainer="Jiang Jiang <jiangjiang@xdf.cn>"

ENV NGINX_VERSION 1.14.0

# for China 
RUN echo 'http://mirrors.ustc.edu.cn/alpine/v3.7/main' > /etc/apk/repositories \
RUN echo 'http://mirrors.ustc.edu.cn/alpine/v3.7/community' >>/etc/apk/repositories \
RUN apk update RUN apk add tzdata \
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
RUN echo "Asia/Shanghai" > /etc/timezone

RUN GPG_KEYS=B0F4253373F8F6F510D42178520A9993A1C052F8 \
	RUN CONFIG="\
		--prefix=/usr/local/nginx \
		--sbin-path=/usr/sbin/nginx \
		--modules-path=/usr/lib/nginx/modules \
		--conf-path=/usr/local/nginx/nginx.conf \
		--error-log-path=/var/log/nginx/error.log \
		--http-log-path=/var/log/nginx/access.log \
		--pid-path=/var/run/nginx.pid \
		--lock-path=/var/run/nginx.lock \
		--http-client-body-temp-path=/var/cache/nginx/client_temp \
		--http-proxy-temp-path=/var/cache/nginx/proxy_temp \
		--http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
		--http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
		--http-scgi-temp-path=/var/cache/nginx/scgi_temp \
		--user=www \
		--group=www \
		--with-http_ssl_module \
		--with-http_realip_module \
		--with-http_addition_module \
		--with-http_sub_module \
		--with-http_dav_module \
		--with-http_flv_module \
		--with-http_mp4_module \
		--with-http_gunzip_module \
		--with-http_gzip_static_module \
		--with-http_random_index_module \
		--with-http_secure_link_module \
		--with-http_stub_status_module \
		--with-http_auth_request_module \
		--with-http_xslt_module=dynamic \
		--with-http_image_filter_module=dynamic \
		--with-http_geoip_module=dynamic \
		--with-threads \
		--with-stream \
		--with-stream_ssl_module \
		--with-stream_ssl_preread_module \
		--with-stream_realip_module \
		--with-stream_geoip_module=dynamic \
		--with-http_slice_module \
		--with-mail \
		--with-mail_ssl_module \
		--with-compat \
		--with-file-aio \
		--with-http_v2_module \
	" \
	RUN addgroup -S www -g 800 \
	RUN adduser -u 800 -D -S -h /var/cache/nginx -s /sbin/nologin -G www www \
	RUN apk add --no-cache --virtual .build-deps \
		gcc \
		libc-dev \
		make \
		openssl-dev \
		pcre-dev \
		zlib-dev \
		linux-headers \
		curl \
		gnupg \
		libxslt-dev \
		gd-dev \
		geoip-dev \
	RUN curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz -o nginx.tar.gz \
	RUN curl -fSL https://nginx.org/download/nginx-$NGINX_VERSION.tar.gz.asc  -o nginx.tar.gz.asc \
	RUN export GNUPGHOME="$(mktemp -d)" \
	RUN found=''; \
	for server in \
		ha.pool.sks-keyservers.net \
		hkp://keyserver.ubuntu.com:80 \
		hkp://p80.pool.sks-keyservers.net:80 \
		pgp.mit.edu \
	; do \
		echo "Fetching GPG key $GPG_KEYS from $server"; \
		gpg --keyserver "$server" --keyserver-options timeout=10 --recv-keys "$GPG_KEYS" RUN found=yes RUN break; \
	done; \
	test -z "$found" RUN echo >&2 "error: failed to fetch GPG key $GPG_KEYS" RUN exit 1; \
	gpg --batch --verify nginx.tar.gz.asc nginx.tar.gz \
	RUN rm -rf "$GNUPGHOME" nginx.tar.gz.asc \
	RUN mkdir -p /usr/src \
	RUN tar -zxC /usr/src -f nginx.tar.gz \
	RUN rm nginx.tar.gz \
	RUN cd /usr/src/nginx-$NGINX_VERSION \
	RUN ./configure $CONFIG --with-debug \
	RUN make -j$(getconf _NPROCESSORS_ONLN) \
	RUN mv objs/nginx objs/nginx-debug \
	RUN mv objs/ngx_http_xslt_filter_module.so objs/ngx_http_xslt_filter_module-debug.so \
	RUN mv objs/ngx_http_image_filter_module.so objs/ngx_http_image_filter_module-debug.so \
	RUN mv objs/ngx_http_geoip_module.so objs/ngx_http_geoip_module-debug.so \
	RUN mv objs/ngx_stream_geoip_module.so objs/ngx_stream_geoip_module-debug.so \
	RUN ./configure $CONFIG \
	RUN make -j$(getconf _NPROCESSORS_ONLN) \
	RUN make install \
	RUN rm -rf /usr/local/nginx/html/ \
	RUN mkdir /usr/local/nginx/conf.d/ \
	RUN mkdir -p /usr/share/nginx/html/ \
	RUN install -m644 html/index.html /usr/share/nginx/html/ \
	RUN install -m644 html/50x.html /usr/share/nginx/html/ \
	RUN install -m755 objs/nginx-debug /usr/sbin/nginx-debug \
	RUN install -m755 objs/ngx_http_xslt_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_xslt_filter_module-debug.so \
	RUN install -m755 objs/ngx_http_image_filter_module-debug.so /usr/lib/nginx/modules/ngx_http_image_filter_module-debug.so \
	RUN install -m755 objs/ngx_http_geoip_module-debug.so /usr/lib/nginx/modules/ngx_http_geoip_module-debug.so \
	RUN install -m755 objs/ngx_stream_geoip_module-debug.so /usr/lib/nginx/modules/ngx_stream_geoip_module-debug.so \
	RUN ln -s ../../usr/lib/nginx/modules /usr/local/nginx/modules \
	RUN strip /usr/sbin/nginx* \
	RUN strip /usr/lib/nginx/modules/*.so \
	RUN rm -rf /usr/src/nginx-$NGINX_VERSION \
	\
	# Bring in gettext so we can get `envsubst`, then throw
	# the rest away. To do this, we need to install `gettext`
	# then move `envsubst` out of the way so `gettext` can
	# be deleted completely, then move `envsubst` back.
	RUN apk add --no-cache --virtual .gettext gettext \
	RUN mv /usr/bin/envsubst /tmp/ \
	\
	RUN runDeps="$( \
		scanelf --needed --nobanner --format '%n#p' /usr/sbin/nginx /usr/lib/nginx/modules/*.so /tmp/envsubst \
			| tr ',' '\n' \
			| sort -u \
			| awk 'system("[ -e /usr/local/lib/" $1 " ]") == 0 { next } { print "so:" $1 }' \
	)" \
	RUN apk add --no-cache --virtual .nginx-rundeps $runDeps \
	RUN apk del .build-deps \
	RUN apk del .gettext \
	RUN mv /tmp/envsubst /usr/local/bin/

COPY nginx.conf /usr/local/nginx/nginx.conf

VOLUME  /var/log/nginx

EXPOSE 80

STOPSIGNAL SIGTERM

CMD ["nginx", "-g", "daemon off;"]
